name: Registry
on:
  push:
    branches:
      - master
    tags:
      - "v*"
  workflow_dispatch: {}

env:
  ENDPOINT: oss-cn-hangzhou.aliyuncs.com
  ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
  ACCESS_KEY_SECRET: ${{ secrets.ACCESS_KEY_SECRET }}

jobs:
  publish-images:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Get the version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [[ ${GITHUB_REF} == "refs/heads/master" ]]; then
            VERSION=latest
          fi
          echo ::set-output name=VERSION::${VERSION}
      - name: Get git revision
        id: vars
        shell: bash
        run: |
          echo "::set-output name=git_revision::$(git rev-parse --short HEAD)"
#      - name: Login ghcr.io
#        uses: docker/login-action@v1
#        with:
#          registry: ghcr.io
#          username: ${{ github.repository_owner }}
#          password: ${{ secrets.CR_PAT }}
      - name: Login docker.io
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/build-push-action@v2
        name: Build & Pushing
        with:
          context: .
          file: Dockerfile
          labels: |-
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            GITVERSION=git-${{ steps.vars.outputs.git_revision }}
            VERSION=${{ steps.get_version.outputs.VERSION }}
          tags: |-
            ghcr.io/${{ github.repository }}/vela-core:${{ steps.get_version.outputs.VERSION }}
            docker.io/oamdev/vela-core:${{ steps.get_version.outputs.VERSION }}

  publish-charts:
    env:
      HELM_CHARTS_DIR: charts
      HELM_CHART: charts/vela-core
      LEGACY_HELM_CHART: legacy/charts/vela-core-legacy
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@master
      - name: Get the version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [[ ${GITHUB_REF} == "refs/heads/master" ]]; then
            VERSION=latest
          fi
          echo ::set-output name=VERSION::${VERSION}
      - name: Get git revision
        id: vars
        shell: bash
        run: |
          echo "::set-output name=git_revision::$(git rev-parse --short HEAD)"
      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0
      - name: Tag helm chart image
        run:  |
          version=${{ steps.get_version.outputs.VERSION }}
          number=${version#"v"}
          sed -i "s/latest/$number/g" $HELM_CHART/values.yaml
          sed -i "s/0.1.0/$number/g" $HELM_CHART/Chart.yaml
      - name: Prepare legacy chart
        run: |
          rsync -r ${LEGACY_HELM_CHART} $HELM_CHARTS_DIR
          rsync -r ${HELM_CHART}/* ${LEGACY_HELM_CHART} --exclude=Chart.yaml --exclude=crds
      - name: Install ossutil
        run: wget http://gosspublic.alicdn.com/ossutil/1.7.0/ossutil64 && chmod +x ossutil64 && mv ossutil64 ossutil
      - name: Configure Alibaba Cloud OSSUTIL
        run: ./ossutil --config-file .ossutilconfig config -i ${ACCESS_KEY} -k ${ACCESS_KEY_SECRET} -e ${ENDPOINT} -c .ossutilconfig
      - name: sync cloud to local
        run: ./ossutil --config-file .ossutilconfig sync oss://kubevelacharts/core .oss/
      - name: Package helm charts
        run: |
          helm package $(HELM_CHART) --destination .oss/
          helm package $(LEGACY_HELM_CHART) --destination .oss/
          helm repo index --url https://kubevelacharts.oss-cn-hangzhou.aliyuncs.com/core .oss/
      - name: sync local to cloud
        run: ./ossutil --config-file .ossutilconfig sync .oss/ oss://kubevelacharts/core -f
